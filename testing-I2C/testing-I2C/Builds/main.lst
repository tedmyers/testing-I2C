   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
 110               	.global	initIO
 112               	initIO:
   1:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c **** #include <stdio.h>
   2:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c **** #include <avr/io.h>
   3:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c **** #include <avr/interrupt.h>
   4:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c **** #include <util/delay.h>
   5:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c **** #include <stdbool.h>
   6:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c **** 
   7:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c **** #include "TWI.h"
   8:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c **** 
   9:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c **** #define RED_PIN     PD3
  10:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c **** #define GREEN_PIN   PD6
  11:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c **** #define BLUE_PIN    PD5
  12:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c **** #define ROT_A       PC0
  13:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c **** #define ROT_B       PC1
  14:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c **** #define BUTTON      PC3
  15:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c **** #define LED_DDR     DDRD
  16:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c **** #define LED_PORT    PORTD
  17:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c **** 
  18:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c **** #define START       0x08
  19:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c **** #define MT_SLA_ACK  0x18
  20:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c **** #define MT_DATA_ACK 0x28
  21:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c **** 
  22:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c **** #define ERROR   1
  23:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c **** #define SUCCESS 0
  24:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c **** 
  25:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c **** /******************************
  26:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****  
  27:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****  testing-I2C: A program to learn about and 
  28:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****  use the I2C communication protocol
  29:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****  
  30:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****  Useful information and tutorial at the following link:
  31:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****  http://www.embedds.com/programming-avr-i2c-interface/
  32:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****  (this program based off of examples provided there)
  33:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****  
  34:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****  
  35:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****  I2C allows control of up to 128 devices
  36:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****  
  37:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****  Uses two pins for communication:
  38:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****  -SCK (System Clock)
  39:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****  -SDA (System Data)
  40:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****  
  41:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****  These pins are pulled high, and are set low to communicate.
  42:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****  This allows easier communication by devices at slightly different
  43:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****  logic levels (e.g. Atmega328 @ 5V vs. Raspberry Pi @ 3.3V)
  44:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****  
  45:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****  Parts of I2C communication:
  46:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****  START  signal
  47:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****  Address Packet     |   Seven bits, lead by data direction bit + acknowledge bit
  48:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****  Data Packet        |   Eight data bits + acknowledge bit
  49:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****  STOP signal
  50:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****  
  51:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****  START and STOP signals are always generated by the master.
  52:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****  These are generated by pulling SDA low while SCL is high
  53:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****  
  54:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****  Acknowledge bit:
  55:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****  Receiver always needs to confirm data received by pulling SDA
  56:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****  low (ACK) or leave high (NACK) to indicate no data received.
  57:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****  
  58:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****  I2C can send multiple bytes in a single packet.
  59:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****  This will be useful to send color data later on to the light
  60:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****  strip controller. We will need to send three bytes of data,
  61:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****  eight bits for each color brightness level.
  62:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****  
  63:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****  Note: AVR uses the term TWI (two-wire interface) to refer
  64:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****  to I2C due to copyright issues. It is the same otherwise
  65:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****  
  66:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****  
  67:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****  ******************************/
  68:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****  
  69:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c **** void initIO(void)
  70:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c **** {
 114               	.LM0:
 115               	.LFBB1:
 116               	/* prologue: function */
 117               	/* frame size = 0 */
 118               	/* stack size = 0 */
 119               	.L__stack_usage = 0
  71:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****     // initialize LED
  72:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****     LED_DDR |= (1 << RED_PIN) | (1 << GREEN_PIN) | (1 << BLUE_PIN);
 121               	.LM1:
 122 0000 8AB1      		in r24,0xa
 123 0002 8866      		ori r24,lo8(104)
 124 0004 8AB9      		out 0xa,r24
 125 0006 0895      		ret
 127               	.Lscope1:
 129               	.global	initTWI
 131               	initTWI:
  73:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****     
  74:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****     // initialize TWI pins as outputs/inputs? (may be done in HW later)
  75:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c **** }
  76:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c **** 
  77:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c **** void initTWI(void)
  78:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c **** {
 133               	.LM2:
 134               	.LFBB2:
 135               	/* prologue: function */
 136               	/* frame size = 0 */
 137               	/* stack size = 0 */
 138               	.L__stack_usage = 0
  79:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****     // TWI Status Register (p.231)
  80:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****     TWSR &= ~(1<<TWPS0) | ~(1<<TWPS1); // PrescalarValue = 1
 140               	.LM3:
 141 0008 E9EB      		ldi r30,lo8(-71)
 142 000a F0E0      		ldi r31,0
 143 000c 8081      		ld r24,Z
 144 000e 8083      		st Z,r24
  81:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****     
  82:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****     // TWI Bit Rate Register (p.230)
  83:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****     TWBR = 0x01;
 146               	.LM4:
 147 0010 81E0      		ldi r24,lo8(1)
 148 0012 8093 B800 		sts 184,r24
  84:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****     
  85:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****     // TWI Control Register (p.231)
  86:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****     TWCR |= (1<<TWEN); // enable TWI
 150               	.LM5:
 151 0016 ECEB      		ldi r30,lo8(-68)
 152 0018 F0E0      		ldi r31,0
 153 001a 8081      		ld r24,Z
 154 001c 8460      		ori r24,lo8(4)
 155 001e 8083      		st Z,r24
 156 0020 0895      		ret
 158               	.Lscope2:
 163               	.global	sendColorsTWI
 165               	sendColorsTWI:
  87:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****     
  88:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****     // Question: is the F_CPU here already prescaled or not?
  89:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****     // Could change the answer: 8MHz or 1MHz
  90:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****     
  91:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****     /*  p.213
  92:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****         -----
  93:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****      F_SCL   = F_CPU /
  94:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****      (16 + 2*TWBR*PrescalarValue)
  95:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****      = 8000000 /
  96:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****      (16 + 2*1*1
  97:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****      = 444.444 kHz?
  98:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****      */
  99:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c **** }
 100:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c **** 
 101:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c **** 
 102:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c **** 
 103:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c **** uint8_t sendColorsTWI(uint8_t red, uint8_t green, uint8_t blue)
 104:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c **** {
 167               	.LM6:
 168               	.LFBB3:
 169 0022 1F93      		push r17
 170 0024 CF93      		push r28
 171 0026 DF93      		push r29
 172               	/* prologue: function */
 173               	/* frame size = 0 */
 174               	/* stack size = 3 */
 175               	.L__stack_usage = 3
 176 0028 182F      		mov r17,r24
 177 002a D62F      		mov r29,r22
 178 002c C42F      		mov r28,r20
 105:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****     TWIStart();
 180               	.LM7:
 181 002e 0E94 0000 		call TWIStart
 106:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****     if (TWIGetStatus() != START )           return ERROR;
 183               	.LM8:
 184 0032 0E94 0000 		call TWIGetStatus
 185 0036 8830      		cpi r24,lo8(8)
 186 0038 01F4      		brne .L8
 107:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****     
 108:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****     TWIWrite(red);
 188               	.LM9:
 189 003a 812F      		mov r24,r17
 190 003c 0E94 0000 		call TWIWrite
 109:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****     if (TWIGetStatus() != MT_SLA_ACK )      return ERROR;
 192               	.LM10:
 193 0040 0E94 0000 		call TWIGetStatus
 194 0044 8831      		cpi r24,lo8(24)
 195 0046 01F4      		brne .L8
 110:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****     
 111:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****     TWIWrite(green);
 197               	.LM11:
 198 0048 8D2F      		mov r24,r29
 199 004a 0E94 0000 		call TWIWrite
 112:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****     if (TWIGetStatus() != MT_DATA_ACK )     return ERROR;
 201               	.LM12:
 202 004e 0E94 0000 		call TWIGetStatus
 203 0052 8832      		cpi r24,lo8(40)
 204 0054 01F4      		brne .L8
 205               	.LBB9:
 206               	.LBB10:
 113:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****     
 114:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****     TWIWrite(blue);
 208               	.LM13:
 209 0056 8C2F      		mov r24,r28
 210 0058 0E94 0000 		call TWIWrite
 115:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****     if (TWIGetStatus() != MT_DATA_ACK )     return ERROR;
 212               	.LM14:
 213 005c 0E94 0000 		call TWIGetStatus
 214 0060 8832      		cpi r24,lo8(40)
 215 0062 01F4      		brne .L8
 116:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****     
 117:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****     TWIStop();
 217               	.LM15:
 218 0064 0E94 0000 		call TWIStop
 118:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****     return SUCCESS;
 220               	.LM16:
 221 0068 80E0      		ldi r24,0
 222 006a 00C0      		rjmp .L5
 223               	.L8:
 115:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****     if (TWIGetStatus() != MT_DATA_ACK )     return ERROR;
 225               	.LM17:
 226 006c 81E0      		ldi r24,lo8(1)
 227               	.L5:
 228               	/* epilogue start */
 229               	.LBE10:
 230               	.LBE9:
 119:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c **** }
 232               	.LM18:
 233 006e DF91      		pop r29
 234 0070 CF91      		pop r28
 235 0072 1F91      		pop r17
 236 0074 0895      		ret
 238               	.Lscope3:
 243               	.global	receiveColorsTWI
 245               	receiveColorsTWI:
 120:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c **** 
 121:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c **** uint8_t receiveColorsTWI(uint8_t *red, uint8_t *green, uint8_t *blue)
 122:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c **** {
 247               	.LM19:
 248               	.LFBB4:
 249               	/* prologue: function */
 250               	/* frame size = 0 */
 251               	/* stack size = 0 */
 252               	.L__stack_usage = 0
 123:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****     
 124:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c **** }
 254               	.LM20:
 255 0076 0895      		ret
 257               	.Lscope4:
 258               		.section	.text.startup,"ax",@progbits
 260               	.global	main
 262               	main:
 125:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c **** 
 126:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c **** int main(void) {
 264               	.LM21:
 265               	.LFBB5:
 266               	/* prologue: function */
 267               	/* frame size = 0 */
 268               	/* stack size = 0 */
 269               	.L__stack_usage = 0
 127:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****     
 128:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c **** 	initIO();
 271               	.LM22:
 272 0000 0E94 0000 		call initIO
 129:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****     initTWI();
 274               	.LM23:
 275 0004 0E94 0000 		call initTWI
 276               	.L16:
 277               	.LBB11:
 130:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****     
 131:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****     uint8_t delay_amount = 20;
 132:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****     uint8_t red_data, green_data, blue_data;
 133:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****     
 134:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****     while (1) {
 135:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****     
 136:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****         // set true if Master
 137:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****         #ifdef true
 138:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****         
 139:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****         // fade all colors up
 140:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****         int i;
 141:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****         for (i = 0; i < 256; i++)
 279               	.LM24:
 280 0008 C0E0      		ldi r28,0
 281 000a D0E0      		ldi r29,0
 282               	.L12:
 284               	.LM25:
 285 000c CF3F      		cpi r28,-1
 286 000e D105      		cpc r29,__zero_reg__
 287 0010 01F0      		breq .+2
 288 0012 04F4      		brge .L17
 142:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****         {
 143:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****             sendColorsTWI(i,i,i);
 290               	.LM26:
 291 0014 4C2F      		mov r20,r28
 292 0016 6C2F      		mov r22,r28
 293 0018 8C2F      		mov r24,r28
 294 001a 0E94 0000 		call sendColorsTWI
 295               	.LBB12:
 296               	.LBB13:
 298               	.Ltext1:
   1:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
   6:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
   9:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  12:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      distribution.
  16:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  17:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  21:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  33:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  35:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  38:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
  41:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  42:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #include <math.h>
  45:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  46:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /** \file */
  47:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     \code
  49:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     \endcode
  53:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  54:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     used.
  58:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  59:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  68:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  77:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  81:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** */
  82:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  83:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
  87:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  88:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
  93:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  94:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
  97:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  98:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #  include <math.h>
 102:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
 103:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 104:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /**
 105:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 107:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 109:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 112:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 114:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 120:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 125:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 129:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 132:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 140:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****  */
 141:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** void
 142:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** {
 144:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	double __tmp ; 
 145:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 146:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 147:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   __STDC_HOSTED__
 148:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 149:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 150:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 151:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 152:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 153:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 154:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 155:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 156:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 157:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 158:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#else
 159:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		//round up by default
 160:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 161:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#endif
 162:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 163:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 300               	.LM27:
 301 001e 87E8      		ldi r24,lo8(4999)
 302 0020 93E1      		ldi r25,hi8(4999)
 303 0022 0197      		1: sbiw r24,1
 304 0024 01F4      		brne 1b
 305 0026 00C0      		rjmp .
 306 0028 0000      		nop
 307               	.LBE13:
 308               	.LBE12:
 310               	.Ltext2:
 141:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****         for (i = 0; i < 256; i++)
 312               	.LM28:
 313 002a 2196      		adiw r28,1
 314 002c 00C0      		rjmp .L12
 315               	.L17:
 141:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****         for (i = 0; i < 256; i++)
 317               	.LM29:
 318 002e 00E0      		ldi r16,0
 319 0030 11E0      		ldi r17,lo8(1)
 320               	.L15:
 144:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****             _delay_ms(delay_amount);
 145:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****         }
 146:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****         // fade all colors down
 147:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****         int j;
 148:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****         for (j = 255; j >= 0; j--)
 149:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****         {
 150:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****             sendColorsTWI(i,i,i);
 322               	.LM30:
 323 0032 4C2F      		mov r20,r28
 324 0034 6C2F      		mov r22,r28
 325 0036 8C2F      		mov r24,r28
 326 0038 0E94 0000 		call sendColorsTWI
 327               	.LBB14:
 328               	.LBB15:
 330               	.Ltext3:
 332               	.LM31:
 333 003c 87E8      		ldi r24,lo8(4999)
 334 003e 93E1      		ldi r25,hi8(4999)
 335 0040 0197      		1: sbiw r24,1
 336 0042 01F4      		brne 1b
 337 0044 00C0      		rjmp .
 338 0046 0000      		nop
 339 0048 0150      		subi r16,1
 340 004a 1109      		sbc r17,__zero_reg__
 341               	.LBE15:
 342               	.LBE14:
 344               	.Ltext4:
 148:/Users/tedmyers/GitHub/testing-I2C/testing-I2C/testing-I2C/main.c ****         for (j = 255; j >= 0; j--)
 346               	.LM32:
 347 004c 0115      		cp r16,__zero_reg__
 348 004e 1105      		cpc r17,__zero_reg__
 349 0050 01F4      		brne .L15
 350 0052 00C0      		rjmp .L16
 351               	.LBE11:
 356               	.Lscope5:
 357               		.text
 359               	.Letext0:
 360               		.ident	"GCC: (GNU) 4.8.1"
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
/var/folders/l2/bb4sdg190jl6980wclmsgs7h0000gr/T//ccutvBZW.s:2      *ABS*:0000003e __SP_H__
/var/folders/l2/bb4sdg190jl6980wclmsgs7h0000gr/T//ccutvBZW.s:3      *ABS*:0000003d __SP_L__
/var/folders/l2/bb4sdg190jl6980wclmsgs7h0000gr/T//ccutvBZW.s:4      *ABS*:0000003f __SREG__
/var/folders/l2/bb4sdg190jl6980wclmsgs7h0000gr/T//ccutvBZW.s:5      *ABS*:00000000 __tmp_reg__
/var/folders/l2/bb4sdg190jl6980wclmsgs7h0000gr/T//ccutvBZW.s:6      *ABS*:00000001 __zero_reg__
/var/folders/l2/bb4sdg190jl6980wclmsgs7h0000gr/T//ccutvBZW.s:112    .text:00000000 initIO
/var/folders/l2/bb4sdg190jl6980wclmsgs7h0000gr/T//ccutvBZW.s:131    .text:00000008 initTWI
/var/folders/l2/bb4sdg190jl6980wclmsgs7h0000gr/T//ccutvBZW.s:165    .text:00000022 sendColorsTWI
/var/folders/l2/bb4sdg190jl6980wclmsgs7h0000gr/T//ccutvBZW.s:245    .text:00000076 receiveColorsTWI
/var/folders/l2/bb4sdg190jl6980wclmsgs7h0000gr/T//ccutvBZW.s:262    .text.startup:00000000 main

UNDEFINED SYMBOLS
TWIStart
TWIGetStatus
TWIWrite
TWIStop
